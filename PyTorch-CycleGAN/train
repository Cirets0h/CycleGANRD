#!/usr/bin/python3

import wandb


import argparse
import itertools

import torchvision.transforms as transforms
from torch.utils.data import DataLoader
from torch.autograd import Variable
from PIL import Image
import torch

from models import Generator
from models import Discriminator
from utils import ReplayBuffer
from utils import LambdaLR
from utils import Logger
from utils import weights_init_normal

from HTR_ctc.train_code.train_htr import *
from HTR_ctc.generated_data_loader.generated_utils import *
from HTR_ctc.generated_data_loader.generated_loader import *

from datasets import ImageDataset

class AddGaussianNoise(object):
    def __init__(self, mean=0., std=1.):
        self.std = std
        self.mean = mean

    def __call__(self, tensor):
        return tensor + torch.randn(tensor.size()) * self.std + self.mean

    def __repr__(self):
        return self.__class__.__name__ + '(mean={0}, std={1})'.format(self.mean, self.std)

parser = argparse.ArgumentParser()
parser.add_argument('--epoch', type=int, default=0, help='starting epoch')
parser.add_argument('--n_epochs', type=int, default=200, help='number of epochs of training')
parser.add_argument('--batchSize', type=int, default=1, help='size of the batches')
parser.add_argument('--dataroot', type=str, default='datasets/horse2zebra/', help='root directory of the dataset')
parser.add_argument('--lr', type=float, default=0.0002, help='initial learning rate')
parser.add_argument('--decay_epoch', type=int, default=100, help='epoch to start linearly decaying the learning rate to 0')
parser.add_argument('--size', type=int, default=256, help='size of the data crop (squared assumed)')
parser.add_argument('--input_nc', type=int, default=3, help='number of channels of input data')
parser.add_argument('--output_nc', type=int, default=3, help='number of channels of output data')
parser.add_argument('--cuda', action='store_true', help='use GPU computation')
parser.add_argument('--n_cpu', type=int, default=8, help='number of cpu threads to use during batch generation')
opt = parser.parse_args()
print(opt)

if torch.cuda.is_available() and not opt.cuda:
    print("WARNING: You have a CUDA device, so you should probably run with --cuda")

###### Definition of variables ######
# Parameters
rd_lr = 0.0000001
identity_loss_factor_A = 5.0
gan_loss_factor_B2A = 1.0
cycle_loss_factor_A = 10.0
identity_loss_factor_B = 4.0
gan_loss_factor_A2B = 1.0
cycle_loss_factor_B = 8.0
rd_loss_factor_B = 2.5
load_last_model = True

# Networks
netG_A2B = Generator(opt.input_nc, opt.output_nc)
netG_B2A = Generator(opt.output_nc, opt.input_nc)
netD_A = Discriminator(opt.input_nc)
netD_B = Discriminator(opt.output_nc)

# Dataset loader
transforms_ = [ transforms.ToTensor()]
                #transforms.Normalize((0.5,0.5,0.5), (0.5,0.5,0.5)),
                #AddGaussianNoise(0., 0.001)

dataset = ImageDataset(opt.dataroot, transforms_=transforms_, unaligned=True)

dataloader = DataLoader(dataset, batch_size=opt.batchSize, shuffle=True, num_workers=opt.n_cpu)


# W & B init
wandb.init(project="cycleganrd", config={"rd_lr": rd_lr, "optimizer_lr" : opt.lr,
                   "identity_loss_factor_A" : identity_loss_factor_A, "gan_loss_factor_B2A" : gan_loss_factor_B2A,
                   "cycle_loss_factor_A" : cycle_loss_factor_A, "identity_loss_factor_B" : identity_loss_factor_B,
                    "gan_loss_factor_A2B" : gan_loss_factor_A2B, "cycle_loss_factor_B" : cycle_loss_factor_B,
                    "rd_loss_factor_B" : rd_loss_factor_B,
                   "crops": 'Bello Gallicum - for 40', "extra" : '', #Binarization + Noise of fakeB to reconstructing A
                   "crop_number" : len(dataset.files_A), "iteration_number" : len(dataloader),
                   "load_last_model": load_last_model})


wandb.watch(netG_A2B)
wandb.watch(netG_B2A)
wandb.watch(netD_A)
wandb.watch(netD_B)

# Reading discriminator initialization
rd, _ = InitStandardRD(wandb=wandb,nlr=rd_lr)

if opt.cuda:
    netG_A2B.cuda()
    netG_B2A.cuda()
    netD_A.cuda()
    netD_B.cuda()


netG_A2B.apply(weights_init_normal)
netG_B2A.apply(weights_init_normal)
netD_A.apply(weights_init_normal)
netD_B.apply(weights_init_normal)


# Lossess
criterion_GAN = torch.nn.MSELoss()
criterion_cycle = torch.nn.L1Loss()
criterion_identity = torch.nn.L1Loss()

# Optimizers & LR schedulers
optimizer_G = torch.optim.Adam(itertools.chain(netG_A2B.parameters(), netG_B2A.parameters()),
                                lr=opt.lr, betas=(0.5, 0.999))
optimizer_D_A = torch.optim.Adam(netD_A.parameters(), lr=opt.lr, betas=(0.5, 0.999))
optimizer_D_B = torch.optim.Adam(netD_B.parameters(), lr=opt.lr, betas=(0.5, 0.999))

lr_scheduler_G = torch.optim.lr_scheduler.LambdaLR(optimizer_G, lr_lambda=LambdaLR(opt.n_epochs, opt.epoch, opt.decay_epoch).step)
lr_scheduler_D_A = torch.optim.lr_scheduler.LambdaLR(optimizer_D_A, lr_lambda=LambdaLR(opt.n_epochs, opt.epoch, opt.decay_epoch).step)
lr_scheduler_D_B = torch.optim.lr_scheduler.LambdaLR(optimizer_D_B, lr_lambda=LambdaLR(opt.n_epochs, opt.epoch, opt.decay_epoch).step)

# Inputs & targets memory allocation
Tensor = torch.cuda.FloatTensor if opt.cuda else torch.Tensor
input_A = Tensor(opt.batchSize, opt.input_nc, opt.size, opt.size)
input_B = Tensor(opt.batchSize, opt.output_nc, opt.size, opt.size)
target_real = Variable(Tensor(opt.batchSize).fill_(1.0), requires_grad=False)
target_fake = Variable(Tensor(opt.batchSize).fill_(0.0), requires_grad=False)

fake_A_buffer = ReplayBuffer()
fake_B_buffer = ReplayBuffer()


#generateCrops(3, '/home/manuel/CycleGANRD/PyTorch-CycleGAN/datasets/cropped_data/', just_generate=True, crop_path='train/A/')



# Loss plot
logger = Logger(opt.n_epochs, len(dataloader))
###################################
if load_last_model:
    netG_A2B.load_state_dict(torch.load('/home/manuel/CycleGANRD/PyTorch-CycleGAN/output/netG_A2B.pth'))
    netG_B2A.load_state_dict(torch.load('/home/manuel/CycleGANRD/PyTorch-CycleGAN/output/netG_B2A.pth'))
    netD_A.load_state_dict(torch.load('/home/manuel/CycleGANRD/PyTorch-CycleGAN/output/netD_A.pth'))
    netD_B.load_state_dict(torch.load('/home/manuel/CycleGANRD/PyTorch-CycleGAN/output/netD_B.pth'))
    rd.loadModel('rd.pt')

##########
trans = transforms.Compose(transforms_)
###### Training ######
for epoch in range(opt.epoch, opt.n_epochs):
    count = 0
    for i, batch in enumerate(dataloader):
        # Set model input
        # real_A = trans(cv2.normalize(cv2.imread('/home/manuel/CycleGANRD/PyTorch-CycleGAN/datasets/cropped_data/News2.png'), None, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_32F)).unsqueeze(0).cuda()
        real_A = Variable(input_A.copy_(batch['A']))
        real_B = Variable(input_B.copy_(batch['B']))

        ###### Generators A2B and B2A ######
        optimizer_G.zero_grad()

        # Identity loss
        # G_A2B(B) should equal B if real B is fed
        same_B = netG_A2B(real_B)
        loss_identity_B = criterion_identity(same_B, real_B) * identity_loss_factor_B
        # G_B2A(A) should equal A if real A is fed
        same_A = netG_B2A(real_A)
        loss_identity_A = criterion_identity(same_A, real_A) * identity_loss_factor_A


        # GAN loss
        fake_B = netG_A2B(real_A)
        pred_fake = netD_B(fake_B)
        loss_GAN_A2B = criterion_GAN(pred_fake, target_real) * gan_loss_factor_A2B

        # #here begins the binarization
        torch_zeros = torch.zeros(real_B.size())
        torch_ones = torch.ones(real_B.size())
        #
        # #if pixel values are over 0.3, they get 0, otherwise 1
        real_B_binary = torch.where(real_B.cpu() > 0.5, torch_ones, torch_zeros)
        #
        # #equalize all three channels so its only black and white
        real_B_binary_np = real_B_binary.numpy()[0]
        real_B_binary_np = np.where(real_B_binary_np[0] + real_B_binary_np[1] + real_B_binary_np[2] == 3, np.ones(real_B_binary_np.shape), np.zeros(real_B_binary_np.shape))
        real_B_binary = torch.Tensor(real_B_binary_np).unsqueeze(0)
        fake_A = netG_B2A(real_B)

        pred_fake = netD_A(fake_A)
        loss_GAN_B2A = criterion_GAN(pred_fake, target_real) * gan_loss_factor_B2A


        #here begins the binarization
        torch_zeros = torch.zeros(fake_B.size())
        torch_ones = torch.ones(fake_B.size())

        # #if pixel values are over 0.3, they get 0, otherwise 1
        fake_B_binary = torch.where(fake_B.cpu() > 0.5, torch_ones, torch_zeros)
        #
        # #equalize all three channels so its only black and white
        fake_B_binary_np = fake_B_binary.numpy()[0]
        fake_B_binary_np = np.where(fake_B_binary_np[0] + fake_B_binary_np[1] + fake_B_binary_np[2] == 3, np.ones(fake_B_binary_np.shape), np.zeros(fake_B_binary_np.shape))
        fake_B_binary = torch.Tensor(fake_B_binary_np).unsqueeze(0)
        #
        # # # #noise
        # fake_B_binary = fake_B_binary + torch.randn(fake_B_binary.size()) * 0.0001
        # np_img = fake_B_binary.detach().squeeze(0).permute(1, 2, 0).cpu().numpy()
        # cv2.imwrite('/home/manuel/CycleGANRD/PyTorch-CycleGAN/output/fake_B_binary.png', np_img * 255)

        recovered_A = netG_B2A(fake_B) #

        # aba = np.concatenate((real_A.detach().squeeze(0).permute(1,2,0).cpu().numpy(), fake_B.detach().squeeze(0).permute(1,2,0).cpu().numpy(), fake_B_binary.detach().squeeze(0).permute(1, 2, 0).cpu().numpy(), recovered_A.detach().squeeze(0).permute(1,2,0).cpu().numpy()), axis=1) *255
        # cv2.imwrite('/home/manuel/CycleGANRD/PyTorch-CycleGAN/output/results/ABA_temp.png', aba)


        loss_cycle_ABA = criterion_cycle(recovered_A, real_A) * cycle_loss_factor_A

        recovered_B = netG_A2B(fake_A)
        loss_cycle_BAB = criterion_cycle(recovered_B, real_B) * cycle_loss_factor_B


        rd_data = []
        rd_loss = 0
        name_A = str(batch['A_name'][0]).rsplit('/')
        name_A = name_A[len(name_A) - 1].rsplit('.')[0]
        np_img = fake_B.detach().squeeze(0).permute(1, 2, 0).cpu().numpy()
        cv2.imwrite('/home/manuel/CycleGANRD/PyTorch-CycleGAN/output/fake_B.png', np_img * 255)
        word_array, info_array = cropWords(fake_B, name_A, '/home/manuel/CycleGANRD/PyTorch-CycleGAN/datasets/cropped_data/')
        for i in range(0, len(word_array)):
            if info_array[i] != 'l':
                #cv2.imwrite('/home/manuel/CycleGANRD/PyTorch-CycleGAN/output/word_' + str(i) + '.png', word_array[i]*255)
                tens = resizeImg(word_array[i],(128, None)).transpose(1, 3).transpose(2, 3)
                np_img = tens.detach().squeeze(0).permute(1, 2, 0).cpu().numpy()
                cv2.imwrite('/home/manuel/CycleGANRD/PyTorch-CycleGAN/output/word_trans' + str(i) + '.png', np_img*255)
                loss, _ = rd.train(tens, (info_array[i],))
                rd_loss += loss.data

        rd_loss = rd_loss/len(word_array) * rd_loss_factor_B


        # Total loss
        loss_G = loss_identity_A + loss_identity_B + loss_GAN_A2B + loss_GAN_B2A + loss_cycle_ABA + loss_cycle_BAB + rd_loss
        loss_G.backward()
        
        optimizer_G.step()
        ###################################

        ###### Discriminator A ######
        optimizer_D_A.zero_grad()

        # Real loss
        pred_real = netD_A(real_A)
        loss_D_real = criterion_GAN(pred_real, target_real)

        # Fake loss
        fake_A_buff = fake_A_buffer.push_and_pop(fake_A)
        pred_fake = netD_A(fake_A_buff.detach())
        loss_D_fake = criterion_GAN(pred_fake, target_fake)

        # Total loss
        loss_D_A = (loss_D_real + loss_D_fake)*0.5
        loss_D_A.backward()

        optimizer_D_A.step()
        ###################################

        ###### Discriminator B ######
        optimizer_D_B.zero_grad()

        # Real loss
        pred_real = netD_B(real_B)
        loss_D_real = criterion_GAN(pred_real, target_real)
        
        # Fake loss
        fake_B_buff = fake_B_buffer.push_and_pop(fake_B)
        pred_fake = netD_B(fake_B_buff.detach())
        loss_D_fake = criterion_GAN(pred_fake, target_fake)

        # Total loss
        loss_D_B = (loss_D_real + loss_D_fake)*0.5
        loss_D_B.backward()

        optimizer_D_B.step()
        ###################################
        count += 1

        # if count == len(dataloader) or (epoch < 5 and count % (len(dataloader) // 10) == 0):
        #     aba = np.concatenate((real_A.detach().squeeze(0).permute(1,2,0).cpu().numpy(), fake_B.detach().squeeze(0).permute(1,2,0).cpu().numpy(), recovered_A.detach().squeeze(0).permute(1,2,0).cpu().numpy()), axis=1) *255
        #     bab = np.concatenate((real_B.detach().squeeze(0).permute(1, 2, 0).cpu().numpy(),
        #                           fake_A.detach().squeeze(0).permute(1, 2, 0).cpu().numpy(),
        #                           recovered_B.detach().squeeze(0).permute(1, 2, 0).cpu().numpy()), axis=1) * 255
        #     cv2.imwrite('/home/manuel/CycleGANRD/PyTorch-CycleGAN/output/results/ABA_' + str(epoch) + '_' + str(count) + '.png', aba)
        #     cv2.imwrite('/home/manuel/CycleGANRD/PyTorch-CycleGAN/output/results/BAB_' + str(epoch) + '_' + str(count) + '.png', bab)

            # Progress report (http://localhos
            # Progress report (http://localhost:8097)
        try:
            logger.log({'loss_G': loss_G, 'loss_G_identity': (loss_identity_A + loss_identity_B),
                        'loss_G_GAN': (loss_GAN_A2B + loss_GAN_B2A),
                        'loss_G_cycle': (loss_cycle_ABA + loss_cycle_BAB), 'loss_D': (loss_D_A + loss_D_B),
                        'loss_RD': rd_loss}, images={})

            if count % 5 == 1:
                np_img = fake_B.detach().squeeze(0).permute(1, 2, 0).cpu().numpy()
                cv2.imwrite('/home/manuel/CycleGANRD/PyTorch-CycleGAN/output/fake_B2.png', np_img * 255)
                wandb.log({'loss_G': loss_G, 'loss_G_identity': (loss_identity_A + loss_identity_B), 'loss_G_GAN': (loss_GAN_A2B + loss_GAN_B2A),
                        'loss_G_cycle': (loss_cycle_ABA + loss_cycle_BAB), 'loss_D': (loss_D_A + loss_D_B), 'loss_RD': rd_loss,
                          'loss_identity_A': loss_identity_A, 'loss_identity_B': loss_identity_B,
                          'loss_GAN_A2B': loss_GAN_A2B, 'loss_GAN_B2A' : loss_GAN_B2A,
                          'loss_cycle_ABA': loss_cycle_ABA, 'loss_cycle_BAB' : loss_cycle_BAB,
                          'loss_D_A': (loss_D_A), 'loss_D_B': loss_D_B,
                        'A -> B -> A': [wandb.Image(real_A,  caption='real_A'), wandb.Image(fake_B, caption='fake_B'), wandb.Image(fake_B_binary, caption='fake_B_binary'), wandb.Image(recovered_A, caption='recovered_A')], 'B -> A -> B': [wandb.Image(real_B,  caption='real_B'), wandb.Image(fake_A, caption='fake_A'),  wandb.Image(recovered_B, caption='recovered_B')]})
            else:
                wandb.log({'loss_G': loss_G, 'loss_G_identity': (loss_identity_A + loss_identity_B), 'loss_G_GAN': (loss_GAN_A2B + loss_GAN_B2A),
                        'loss_G_cycle': (loss_cycle_ABA + loss_cycle_BAB), 'loss_D': (loss_D_A + loss_D_B), 'loss_RD': rd_loss,
                          'loss_identity_A': loss_identity_A, 'loss_identity_B': loss_identity_B,
                          'loss_GAN_A2B': loss_GAN_A2B, 'loss_GAN_B2A' : loss_GAN_B2A,
                          'loss_cycle_ABA': loss_cycle_ABA, 'loss_cycle_BAB' : loss_cycle_BAB,
                          'loss_D_A': (loss_D_A), 'loss_D_B': loss_D_B})

        except:
            print('Loss error')

    # Update learning rates
    lr_scheduler_G.step()
    lr_scheduler_D_A.step()
    lr_scheduler_D_B.step()

    # Save models checkpoints
    torch.save(netG_A2B.state_dict(), '/home/manuel/CycleGANRD/PyTorch-CycleGAN/output/netG_A2B.pth')
    # torch.save(model.state_dict(), os.path.join(wandb.run.dir, 'model.pt'))
    torch.save(netG_B2A.state_dict(), '/home/manuel/CycleGANRD/PyTorch-CycleGAN/output/netG_B2A.pth')
    torch.save(netD_A.state_dict(), '/home/manuel/CycleGANRD/PyTorch-CycleGAN/output/netD_A.pth')
    torch.save(netD_B.state_dict(), '/home/manuel/CycleGANRD/PyTorch-CycleGAN/output/netD_B.pth')
    rd.saveModel('rd.pt')
    
    generateCrops(3, '/home/manuel/CycleGANRD/PyTorch-CycleGAN/datasets/cropped_data/', just_generate=True, crop_path='train/A/')

    dataloader = DataLoader(ImageDataset(opt.dataroot, transforms_=transforms_, unaligned=True),
                            batch_size=opt.batchSize, shuffle=True, num_workers=opt.n_cpu)
###################################

